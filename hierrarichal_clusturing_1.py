# -*- coding: utf-8 -*-
"""Hierrarichal Clusturing 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yB72eiL7q7vnNiB33nF8tgPH_e7AZLbM
"""

file1=open("/content/input2.txt","r")
input_data=file1.read().splitlines()
file1.close()
print(input_data)
input_data1=[]
import re
for item in input_data:
  a=re.sub(r"[\([{})\]]","",item)
  a=a.replace(" ","")
  a=a.split(",")
  input_data1.append(a)

print(input_data1)

import pandas as pd
import numpy as np
df=pd.DataFrame(input_data1,columns=['height','weight','age','gender'])
print(df)

x=df.iloc[:,:-1].values
for i in range(0,len(x)):
  for j in range(0,len(x[0])):
    x[i][j]=float(x[i][j])
print(x)

def find_mincluster_matrix(matrix_x):
  if np.min(matrix_x)==100000.0:
    print("no more cluster possible")
  else:
    cluster=np.where(matrix_x==np.min(matrix_x))
    cluster=np.squeeze(cluster)
    cluster=np.sort(cluster)
    print("min value is: ")
    print(np.min(matrix_x))
    ar1=list(matrix_x[cluster[0]])
    ar2=list(matrix_x[cluster[1]])
    ac1=[item[cluster[0]] for item in matrix_x]
    ac2=[item[cluster[1]] for item in matrix_x]
    for i in range(0,len(ar1)):
      if ar1[i]!=100000.0 and ar2[i]!=100000.0:
        mini=[]
        mini.append(ar1[i])
        mini.append(ar2[i])
        ar1[i]=min(mini)
    for i in range(0,len(ar1)):
      if ac1[i]!=100000.0 and ar2[i]!=100000.0:
        mini=[]
        mini.append(ac1[i])
        mini.append(ar2[i])
        ac1[i]=min(mini)
    for i in range(0,len(ar1)):
      if ac1[i]!=100000.0 and ac2[i]!=100000.0:
        mini=[]
        mini.append(ac1[i])
        mini.append(ac2[i])
        ac1[i]=min(mini)
    for i in range(0,len(ar1)):
      matrix_x[cluster[1],i]=100000.0
    for i in range(0,len(ac1)):
      matrix_x[i,cluster[1]]=100000.0
    kp=ac1[cluster[1]]
    for i in range(0,len(ac1)):
      if ac1[i]==kp:
        ac1[i]=100000.0
    for i in range(0,len(ar1)):
      matrix_x[cluster[0],i]=ar1[i]
    for i in range(0,len(ac1)):
      matrix_x[i,cluster[0]]=ac1[i]
    return matrix_x,cluster;

def find_mincluster(x):
  clust=[]
  k=len(x)
  matrix_x=np.zeros((k,k))
  for i in range(0,len(matrix_x)):
    for j in range(0,len(matrix_x)):
      if i>j:
        matrix_x[i,j]=float(np.linalg.norm(np.array(x[i])-np.array(x[j])))
      else:
        matrix_x[i,j]=100000
  print("shape of the matrix before clustering: ")
  print(np.shape(matrix_x))
  for po in range (0,len(matrix_x)-1):
    matrix_x,cluster=find_mincluster_matrix(matrix_x)
    cluster=list(cluster)
    print(" the cluster is: ")
    print(cluster)
    k1=0
    for item in clust:
      for k in range(0,len(item)):
        if item[k]==cluster[0]:
          item.append(cluster[1])
          k1=1
          break
        if item[k]==cluster[1]:
          item.append(cluster[0])
          k1=1
          break
    if k1==0:
      clust.append(cluster)
    merge=[]
    for item in clust:
      pi=0
      for k in range(0,len(item)):
        if item[k]==cluster[0] or item[k]==cluster[1]:
          pi=pi+1
      if pi==2:
        merge.append(clust.index(item))
    if len(merge)==2:
      clust[merge[0]]=clust[merge[0]]+clust[merge[1]]
      clust.remove(clust[merge[1]])
    for i in range (0,len(clust)):
      uniq1=clust[i]
      uniq1=np.asarray(uniq1)
      uniq1=np.unique(uniq1)
      clust[i]=list(uniq1)
    clusti2=[]
    for item in clust:
      for i in range(0,len(item)):
        clusti2.append(item[i])
    for i in range(0,len(x)):
      k=0
      for j in range(0,len(clusti2)):
        if i==clusti2[j]:
          k=1
      if k==0:
        clust.append([i])
    print("the cluster array is ")
    print(clust)
    print("shape of the matrix is: ")
    print("("+str(len(matrix_x)-po-1)+","+str(len(matrix_x)-po-1)+")")
  print(clust)

def find_maxcluster_matrix(matrix_x):
  if np.min(matrix_x)==100000.0:
    print("no more cluster possible")
  else:
    cluster=np.where(matrix_x==np.min(matrix_x))
    cluster=np.squeeze(cluster)
    cluster=np.sort(cluster)
    print("min value is: ")
    print(np.min(matrix_x))
    ar1=list(matrix_x[cluster[0]])
    ar2=list(matrix_x[cluster[1]])
    ac1=[item[cluster[0]] for item in matrix_x]
    ac2=[item[cluster[1]] for item in matrix_x]
    for i in range(0,len(ar1)):
      if ar1[i]!=100000.0 and ar2[i]!=100000.0:
        mini=[]
        mini.append(ar1[i])
        mini.append(ar2[i])
        ar1[i]=max(mini)
    for i in range(0,len(ar1)):
      if ac1[i]!=100000.0 and ar2[i]!=100000.0:
        mini=[]
        mini.append(ac1[i])
        mini.append(ar2[i])
        ac1[i]=max(mini)
    for i in range(0,len(ar1)):
      if ac1[i]!=100000.0 and ac2[i]!=100000.0:
        mini=[]
        mini.append(ac1[i])
        mini.append(ac2[i])
        ac1[i]=max(mini)
    for i in range(0,len(ar1)):
      matrix_x[cluster[1],i]=100000.0
    for i in range(0,len(ac1)):
      matrix_x[i,cluster[1]]=100000.0
    kp=ac1[cluster[1]]
    for i in range(0,len(ac1)):
      if ac1[i]==kp:
        ac1[i]=100000.0
    for i in range(0,len(ar1)):
      matrix_x[cluster[0],i]=ar1[i]
    for i in range(0,len(ac1)):
      matrix_x[i,cluster[0]]=ac1[i]
    return matrix_x,cluster;

def find_maxcluster(x):
  clust=[]
  k=len(x)
  matrix_x=np.zeros((k,k))
  for i in range(0,len(matrix_x)):
    for j in range(0,len(matrix_x)):
      if i>j:
        matrix_x[i,j]=float(np.linalg.norm(np.array(x[i])-np.array(x[j])))
      else:
        matrix_x[i,j]=100000
  print("shape of the matrix before clustering: ")
  print(np.shape(matrix_x))
  for po in range (0,len(matrix_x)-1):
    matrix_x,cluster=find_maxcluster_matrix(matrix_x)
    cluster=list(cluster)
    print(" the cluster is: ")
    print(cluster)
    k1=0
    for item in clust:
      for k in range(0,len(item)):
        if item[k]==cluster[0]:
          item.append(cluster[1])
          k1=1
          break
        if item[k]==cluster[1]:
          item.append(cluster[0])
          k1=1
          break
    if k1==0:
      clust.append(cluster)
    merge=[]
    for item in clust:
      pi=0
      for k in range(0,len(item)):
        if item[k]==cluster[0] or item[k]==cluster[1]:
          pi=pi+1
      if pi==2:
        merge.append(clust.index(item))
    if len(merge)==2:
      clust[merge[0]]=clust[merge[0]]+clust[merge[1]]
      clust.remove(clust[merge[1]])
    for i in range (0,len(clust)):
      uniq1=clust[i]
      uniq1=np.asarray(uniq1)
      uniq1=np.unique(uniq1)
      clust[i]=list(uniq1)
    clusti2=[]
    for item in clust:
      for i in range(0,len(item)):
        clusti2.append(item[i])
    for i in range(0,len(x)):
      k=0
      for j in range(0,len(clusti2)):
        if i==clusti2[j]:
          k=1
      if k==0:
        clust.append([i])
    print("the cluster array is ")
    print(clust)
    print("shape of the matrix is: ")
    print("("+str(len(matrix_x)-po-1)+","+str(len(matrix_x)-po-1)+")")
  print(clust)

def find_avgcluster_matrix(matrix_x):
  if np.min(matrix_x)==100000.0:
    print("no more cluster possible")
  else:
    cluster=np.where(matrix_x==np.min(matrix_x))
    cluster=np.squeeze(cluster)
    cluster=np.sort(cluster)
    print("min value is: ")
    print(np.min(matrix_x))
    ar1=list(matrix_x[cluster[0]])
    ar2=list(matrix_x[cluster[1]])
    ac1=[item[cluster[0]] for item in matrix_x]
    ac2=[item[cluster[1]] for item in matrix_x]
    for i in range(0,len(ar1)):
      if ar1[i]!=100000.0 and ar2[i]!=100000.0:
        mini=[]
        mini.append(ar1[i])
        mini.append(ar2[i])
        ar1[i]=(mini[0]+mini[1])/2
    for i in range(0,len(ar1)):
      if ac1[i]!=100000.0 and ar2[i]!=100000.0:
        mini=[]
        mini.append(ac1[i])
        mini.append(ar2[i])
        ac1[i]=(mini[0]+mini[1])/2
    for i in range(0,len(ar1)):
      if ac1[i]!=100000.0 and ac2[i]!=100000.0:
        mini=[]
        mini.append(ac1[i])
        mini.append(ac2[i])
        ac1[i]=(mini[0]+mini[1])/2
    for i in range(0,len(ar1)):
      matrix_x[cluster[1],i]=100000.0
    for i in range(0,len(ac1)):
      matrix_x[i,cluster[1]]=100000.0
    kp=ac1[cluster[1]]
    for i in range(0,len(ac1)):
      if ac1[i]==kp:
        ac1[i]=100000.0
    for i in range(0,len(ar1)):
      matrix_x[cluster[0],i]=ar1[i]
    for i in range(0,len(ac1)):
      matrix_x[i,cluster[0]]=ac1[i]
    return matrix_x,cluster;

def find_avgcluster(x):
  clust=[]
  k=len(x)
  matrix_x=np.zeros((k,k))
  for i in range(0,len(matrix_x)):
    for j in range(0,len(matrix_x)):
      if i>j:
        matrix_x[i,j]=float(np.linalg.norm(np.array(x[i])-np.array(x[j])))
      else:
        matrix_x[i,j]=100000
  print("shape of the matrix before clustering: ")
  print(np.shape(matrix_x))
  for po in range (0,len(matrix_x)-1):
    matrix_x,cluster=find_avgcluster_matrix(matrix_x)
    cluster=list(cluster)
    print(" the cluster is: ")
    print(cluster)
    k1=0
    for item in clust:
      for k in range(0,len(item)):
        if item[k]==cluster[0]:
          item.append(cluster[1])
          k1=1
          break
        if item[k]==cluster[1]:
          item.append(cluster[0])
          k1=1
          break
    if k1==0:
      clust.append(cluster)
    merge=[]
    for item in clust:
      pi=0
      for k in range(0,len(item)):
        if item[k]==cluster[0] or item[k]==cluster[1]:
          pi=pi+1
      if pi==2:
        merge.append(clust.index(item))
    if len(merge)==2:
      clust[merge[0]]=clust[merge[0]]+clust[merge[1]]
      clust.remove(clust[merge[1]])
    for i in range (0,len(clust)):
      uniq1=clust[i]
      uniq1=np.asarray(uniq1)
      uniq1=np.unique(uniq1)
      clust[i]=list(uniq1)
    clusti2=[]
    for item in clust:
      for i in range(0,len(item)):
        clusti2.append(item[i])
    for i in range(0,len(x)):
      k=0
      for j in range(0,len(clusti2)):
        if i==clusti2[j]:
          k=1
      if k==0:
        clust.append([i])
    print("the cluster array is ")
    print(clust)
    print("shape of the matrix is: ")
    print("("+str(len(matrix_x)-po-1)+","+str(len(matrix_x)-po-1)+")")
  print(clust)

print("select a linkage: single (minimum) linkage -->  1 ")
print("select a linkage: complete (maximum) linkage  -->  2 ")
print("select a linkage: average (mean) linkage  -->  3 ")
input1=int(input("enter: "))
if input1==1:
  print("single (minimum) linkage at all levels ")
  find_mincluster(x)
if input1==2:
  print("complete (maximum) linkage at all levels ")
  find_maxcluster(x)
if input1==3:
  print("average (mean) linkage at all levels ")
  find_avgcluster(x)



